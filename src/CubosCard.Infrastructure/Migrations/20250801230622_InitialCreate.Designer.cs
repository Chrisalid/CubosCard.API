// <auto-generated />
using System;
using CubosCard.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CubosCard.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250801230622_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CubosCard.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("branch");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_account_person_id");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.AuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_auth_token");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_auth_token_person_id");

                    b.ToTable("AuthToken", (string)null);
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cvv");

                    b.Property<int>("CardType")
                        .HasColumnType("integer")
                        .HasColumnName("card_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_card");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_card_account_id");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_person");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_transaction");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_transaction_account_id");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_transaction_card_id");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Account", b =>
                {
                    b.HasOne("CubosCard.Domain.Entities.Person", "Person")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_person_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.AuthToken", b =>
                {
                    b.HasOne("CubosCard.Domain.Entities.Person", "Person")
                        .WithMany("AuthTokens")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_token_person_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Card", b =>
                {
                    b.HasOne("CubosCard.Domain.Entities.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CubosCard.Domain.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_account_account_id");

                    b.HasOne("CubosCard.Domain.Entities.Card", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CardId")
                        .HasConstraintName("fk_transaction_card_card_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Account", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Card", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CubosCard.Domain.Entities.Person", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AuthTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
